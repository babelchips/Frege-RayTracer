module RayTracer where

import Prelude.Math

-------------------------------------------------
-- 3d vector representation and manipulation

-- NB: We have a right handed coordinate system.  If x increases to your right, and Y increases downwards then
-- you are looking in the direction of increasing Z.

-- type Vector3 = (Double, Double, Double)
data Vector3 = Vec3 { !x, !y, !z :: Double }

truncate :: Double -> Int
truncate n = let n' = round n
             in if ( n'.double > n ) then (n' - 1).int else (n').int

add :: Vector3 -> Vector3 -> Vector3
add v1 v2 = Vec3 { x = v1.x + v2.x, y = v1.y + v2.y, z = v1.z + v2.z }

sub :: Vector3 -> Vector3 -> Vector3
sub v1 v2 = Vec3 { x = v1.x - v2.x, y = v1.y - v2.y, z = v1.z - v2.z }

squared_mag :: Vector3 -> Double
squared_mag v = v.x * v.x + v.y * v.y + v.z * v.z

mag :: Vector3 -> Double
mag v = sqrt (squared_mag v)

scalarmult :: Vector3 -> Double -> Vector3
scalarmult v c = Vec3 { x = v.x * c, y = v.y * c, z = v.z * c }

dot :: Vector3 -> Vector3 -> Double
dot v1 v2 = v1.x * v2.x + v2.y * v1.y + v2.z * v1.z

cross :: Vector3 -> Vector3 -> Vector3
cross v1 v2 = Vec3 {x = v1.y * v2.z + v1.z * v2.y, y = - (v1.x * v2.z + v1.z * v2.x ), z = v1.x * v2.y + v1.y * v2.x}

normalize :: Vector3 -> Vector3
normalize v
  | (mag v) /= 0 = scalarmult v (1 / mag v) 
  | otherwise    = Vec3 {x = 0, y = 0, z = 0}

neg :: Vector3 -> Vector3
neg v = Vec3 { x = -v.x , y = -v.y, z = -v.z }

-------------------------------------------------
-- 3d Ray: Used as a semi-infinite 3d line.

type Point3 = Vector3
type Direction3 = Vector3
type Time = Double
data Ray = Ray { !base :: Point3, !dir :: Direction3 } -- base and direction

position_at_time :: Ray -> Time -> Point3
position_at_time ray t = ray.base `add` (scalarmult ray.dir t)

-------------------------------------------------
-- Generic maths functions

-- Calculate the roots of the equation a * x^2 + b * x + c = 0
roots :: Double -> Double -> Double -> [Double]
roots a b c = let discriminant = b*b - 4*a*c
        in if (discriminant < 0.0) then []
           else [ 0.5 * (-b + (sqrt discriminant) ), 0.5 * (-b - (sqrt discriminant) ) ]

-- Arg, I can't find haskells xor function!
xor :: Bool -> Bool -> Bool
xor True b  = not b
xor False b = b

---------------------------------------------------------------------------------------
-- Color model:  We store red, green and blue values as Doubles between 0.0 and 1.0
--               However, the bounds are not enforced in any way, except by calling clamp

data Color = Color { !r, !g, !b :: Double }

-- Predefined colors for convience
red, green, blue, white, black, midgrey, nearlywhite :: Color
red     = Color { r = 1.0, g = 0.0, b = 0.0 }
green   = Color { r = 0.0, g = 1.0, b = 0.0 }
blue    = Color { r = 0.0, g = 0.0, b = 1.0 }
white   = Color { r = 1.0, g = 1.0, b = 1.0 }
black   = Color { r = 0.0, g = 0.0, b = 0.0 }
midgrey = Color { r = 0.5, g = 0.5, b = 0.5 }
nearlywhite = Color { r = 0.8, g = 0.8, b = 0.8 }

scale_col :: Color -> Double -> Color
scale_col c k = Color { r = c.r * k, g = c.g * k, b = c.b * k }

add_col :: Color -> Color -> Color
add_col c1 c2 = Color { r = c1.r + c2.r, g = c1.g + c2.g, b = c1.b + c2.b }

clamp :: Color -> Color
clamp c = Color { r = clampDouble c.r, g = clampDouble c.g, b = clampDouble c.b }
                where clampDouble f = (max 0.0 (min 1.0 f))

combine_col :: Color -> Color -> Color
combine_col c1 c2 = Color { r = c1.r * c2.r, g = c1.g * c2.g, b = c1.b * c2.b }

---------------------------------------------------------------------------------------
-- Procedural textures:  Various predefined 3d texture functions

flatred, shinyred, semishinygreen, shinywhite :: Point3 -> Material
flatred _ = Material { col = red, ref = 0.0, diff = 1.0 }
shinyred _ = Material { col = red, ref = 0.3, diff = 0.9 }
semishinygreen _ = Material { col = green, ref = 0.5, diff = 0.7 }
shinywhite _ = Material { col = white, ref = 0.3, diff = 0.9 }

-- alternate 20x20x20 black and white cubes
checked_matt :: Point3 -> Material
checked_matt p = let xeven = even (truncate (p.x / 20.0))
                     yeven = even (truncate (p.y / 20.0))
                     zeven = even (truncate (p.z / 20.0))
                 in if ((xeven `xor` yeven) `xor` zeven) then Material { col = white, ref = 0.0, diff = 1.0 } else Material { col = black, ref = 0.0, diff = 1.0 }


---------------------------------------------------------------------------------------
-- Materials:  Each point on the surface of a shape has its own color, reflectivity (kr)
--             and diffuseness (kd)

type Reflectivity = Double
type Diffuseness = Double
data Material = Material { col :: Color, ref :: Reflectivity, diff ::Diffuseness }


---------------------------------------------------------------------------------------
-- Shapes:  A shape is something which we check for intersection with a ray, and get
--          information about the intersection point (material, normal and intersection position)
--          Currently we have a plane and a sphere

type Normal = Vector3
type Radius = Double

data Shape = Sphere Point3 Radius (Point3 -> Material)
           | Plane Normal Double (Point3 -> Material) 

-- Plane is defined by a normal (its a 2 sided plane though) and a distance.  
-- The plane coincident with y=5 and normal (0,0,1) has distance -5.

---------------------------------------------------------------------------------------
-- Intersection calculations

-- An intersection is represented by the normal at the intersection point, the point of intersection,
-- the direction of the viewing ray coming in to the intersection and the material at the intersection 
-- point.  

-- These intersection equations are taken from www.education.siggraph.org/materials/HyperGraph

data Intersection = Intersection { norm :: Normal, pt :: Point3, ray :: Ray, mat :: Material }

-- When we calculate reflected rays, they start on the surface of the shape.  Unfortunately,
-- our limited numerical precision can make them be under the surface and so the reflected
-- ray immediately (at t very close to 0) hits the surface of the shape which it's meant to
-- be going away from.  So, we filter out any intersections which occur at t < epsilon.
epsilon :: Double
epsilon = 0.001


intersect :: Ray -> Shape -> [(Time, Intersection)]
intersect ray shape = case shape of
                            (Sphere center rad materialfn) -> let a = squared_mag ray.dir
                                                                  b = 2 * ( ray.dir `dot` (ray.base `sub` center))
                                                                  c = (squared_mag (ray.base `sub` center)) - rad^2
                                                                  times = filter (> epsilon) (roots a b c)
                                                                  normal_at_time t = normalize ((position_at_time ray t) `sub` center)
                                                                  intersection_at_time t = Intersection { norm = normal_at_time t, pt = position_at_time ray t, ray = ray, mat = materialfn (position_at_time ray t) }
                                                              in map (\t -> (t,intersection_at_time t)) times
                            (Plane normal d materialfn2) = let vd = (normalize normal) `dot` ray.dir
                                                               v0 = negate (((normalize normal) `dot` ray.base) + d)
                                                           in if (vd == 0) then []
                                                              else let t = v0 / vd
                                                                       hitpoint = position_at_time ray t
                                                                   in if t > epsilon then [ (t, Intersection { norm = if (vd > 0) then (neg normal) else normal, pt = hitpoint, ray = ray, mat = materialfn2 hitpoint } ) ]
                                                                      else []

-- Extract the closest intersection (lowest time) from a list
closest :: [ (Time,Intersection) ] -> Intersection
closest xs = let select_nearest (t1,i1) (t2,i2) = if (t1<t2) then (t1,i1) else (t2,i2)
             in snd (fold select_nearest (head xs) (tail xs))

---------------------------------------------------------------------------------------
-- Lights:  We have a non-shadowable Directional light and a shadowable spotlight 
data Light = Directional Vector3 Color
           | Spotlight Point3 Color

---------------------------------------------------------------------------------------
-- Global bindings

-- If a  ray doesn't hit an object, what color should we use?
background_color :: Color
background_color = blue

-- What lights are in our scene?

lights :: [Light]
lights = [ Spotlight ( Vec3 { x = 100, y = -30, z = 0 } ) nearlywhite,
     Spotlight ( Vec3 { x = -100, y = -100, z = 150 } ) nearlywhite ]

-- What is the ambient lighting in the scene
ambient_light :: Color
ambient_light = Color { r = 0.1, g = 0.1, b = 0.1 }

-- What Shapes are in our scene?
shapes :: [Shape]
shapes = [ Plane (normalize ( Vec3 { x = 0, y = (-1), z = 0 } ) ) 50 shinyred,
     Sphere ( Vec3 { x = 50, y = 10, z = 100 } ) 40 semishinygreen,
     Sphere ( Vec3 { x = -80, y = 0, z = 80 } ) 50 checked_matt ]

---------------------------------------------------------------------------------------
-- Local lighting model

-- Is the light at 'lightpos' visible from point?
point_is_lit :: Point3 -> Point3 -> Bool
point_is_lit point lightpos = let path = lightpos `sub` point
                                  time_at_light = mag path
                                  ray = Ray { base = point , dir = normalize path }
                                  hits = concat (map (intersect ray) shapes)
                                  times = fst (unzip hits)
                              in if (null times) then True else (minimum times) > time_at_light

-- Helper to calculate the diffuse light at the surface normal, given
-- the light direction (from light source to surface)
diffuse_coeff :: Vector3 -> Vector3 -> Double
diffuse_coeff light_dir normal = max 0.0 (negate ((normalize light_dir) `dot` (normalize normal)))

local_light :: Intersection -> Light -> Color
-- Simple case of a non-shadowable directional light
-- Spotlight - shadowable
local_light i s = case s of
                      (Directional dir lightcol)     -> let
                                                            mixed_color = (combine_col i.mat.col lightcol)
                                                            diffuse = scale_col mixed_color ((diffuse_coeff dir i.norm) * i.mat.diff)
                                                        in diffuse
                      (Spotlight lightpos lightcol)  -> let
                                                            mixed_color = combine_col i.mat.col lightcol
                                                            diffuse = scale_col mixed_color (i.mat.diff * (diffuse_coeff (i.pt `sub` lightpos) i.norm))
                                                        in if (point_is_lit i.pt lightpos) then diffuse else black


---------------------------------------------------------------------------------------
-- Reflections (part of the global lighting model)

-- Ray trace the outgoing reflected ray from an intersection (depth is the level of recursion
-- which we're at in the ray tracing)
reflected_ray :: Integer -> Intersection -> Color
reflected_ray depth i
   | i.mat.diff == 0.0 = black
   | otherwise = let k = 2 * ((normalize i.norm) `dot` (normalize (neg i.ray.dir)))
                     out_ray_dir = (scalarmult (normalize i.norm) k) `sub` (neg i.ray.dir)
                     reflected_col = raytrace (depth + 1) (Ray { base = i.pt, dir = out_ray_dir } )
                     ret = scalarmult ( Vec3 { x = reflected_col.r, y = reflected_col.g, z = reflected_col.b } ) i.mat.diff
                 in Color { r = ret.x, g = ret.y, b = ret.z}

---------------------------------------------------------------------------------------
-- Image output: We can write a ppm (Portable Pixmap) file by converting a list of
-- colors (length is width * height) into a big string
make_pgm :: Int -> Int -> [ Color ] -> String
make_pgm width height xs = "P3\n" ++ show width ++ " " ++ show height ++ "\n255\n" ++ ( ST.run (stringify xs) )


format :: Color -> String
format c = show (round (c.r*255)) ++ " " ++ show (round (c.g * 255)) ++ " " ++ show (round (c.b*255)) ++ " "

stringify [] = return ""
stringify xs = do
               sb <- StringBuilder.new ""
               mapM_ (\t -> sb.append (format t)) xs
               sb.toString


---------------------------------------------------------------------------------------
-- Viewing screen and camera functions:  We define the camera position and the point which
-- we're looking at.  We also define an 'up' vector and a distance to the screen.  The
-- following functions generate a list of points (in raster order - a fact which is relied
-- upon when we write the image out as a ppm) which correspond to the 3d positions of the
-- pixels on our virtual screen.

-- Camera position, distance to screen, "Looking at" position, up vector
data View = View { camerapos :: Point3, viewdist :: Double, lookingat :: Point3, viewup :: Vector3 }

pixel_grid :: View -> Double -> Double -> [ Point3 ]
pixel_grid view width height =
   let grid = [ Vec3 { x = x.double, y = y.double, z = 0.double } | y <- [0..((round width) - 1).int], x <- [0..((round height) - 1).int] ]
       centering_offset = Vec3 { x = - width / 2.0, y = - height / 2.0 , z = 0 }
       pixel_offsets = map (add centering_offset) grid
       viewdir = normalize (view.lookingat `sub` view.camerapos)
       screen_center = view.camerapos `add` (scalarmult viewdir view.viewdist)
       viewright = viewdir `cross` view.viewup
       transform p = ( screen_center `add` (scalarmult viewright p.x) ) `add` (scalarmult (neg view.viewup) p.y) 
   in map transform pixel_offsets

-- Parallel projection function which creates rays parallel to the viewing screen
parallel_projection :: View -> Point3 -> Ray
parallel_projection view point  = Ray { base = point, dir = normalize (view.lookingat `sub` view.camerapos) }

-- Perspective projection which creates rays through (0,0,-distance) through the point
perspective_projection :: View -> Point3 -> Ray
perspective_projection view point = Ray { base = point, dir = normalize (point `sub` view.camerapos) }

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
-- Main rendering functions

-- Calculate the overall color of a ray/shape intersection, taking into account
-- local lighting (diffuse only) and global lighting (reflections only, to a depth
-- of 2 bounces)
overall_lighting :: Integer -> Intersection -> Color
overall_lighting depth hit = let sum_colors = foldr add_col black
                                 local_lighting = ambient_light `add_col` sum_colors (map (local_light hit) lights)
                                 global_lighting = if (depth < 2) then (reflected_ray depth hit) else black
                             in clamp (local_lighting `add_col` global_lighting)

-- Trace a ray through the scene and work out what color it should be.
-- Takes a 'depth' argument which is 0 for top level viewing rays increases
-- by one for each level of recursive raytracing we do (as a result of reflections
-- or transmissions)
raytrace :: Integer -> Ray -> Color -- uses global 'shapes'
raytrace depth ray = let hits = concat (map (intersect ray) shapes)
                     in if (null hits) then background_color
                        else overall_lighting depth (closest hits)


-- type View = View { camerapos :: Point3, viewdist :: Double, lookingat :: Point3, viewup :: Vector3 }
render_to_pgm :: Double -> Double -> String
render_to_pgm width height = let view = ( View { camerapos = Vec3 { x = 0, y = 0, z = -100 }, viewdist = 100, lookingat =  Vec3 { x = 0, y = 0, z = 100 }, viewup = Vec3 { x = 0, y = -1, z = 0 } } )
                                 projection = perspective_projection view
                                 ray_collection = map projection (pixel_grid view width height)
                                 color_collection = map (raytrace 0) ray_collection
                             in make_pgm (round width).int (round height).int color_collection

main :: IO ()
main = writeFile "test.ppm" (render_to_pgm 500 500)
